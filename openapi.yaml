openapi: 3.0.1
info:
  title: YouNeed Mobile API v2
  description: The YouNeed API enables programmatic access to YouNeed in unique and advanced ways.
  contact:
    email: se@ambrogio.com
  version: 1.0.0
servers:
- url: https://alpha.web.youneed.it/mobile/api/v2
  description: Alpha API server.

tags:
- name: Authentication
  description: Authentication API
- name: User
  description: Authenticated user API
- name: Timecard
  description: Timecard API
- name: Files (ðŸš§ Not implemented yet ðŸš§)
  description: File API
paths:
# Authentication
  /auth/login:
    post:
      tags:
      - Authentication
      summary: Login
      description: |
        Logs in a user.  
        The returned **access token** must be passed as Bearer token to access protected APIs until it expires.  
        Once the **access token** is expired, it must be refreshed using the **refresh token**.
      requestBody:
        description: Credentials
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Credentials'
        required: true
      responses:
        200:
          description: Tokens
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tokens'
        400:
          $ref: '#/components/responses/BadRequest' 
        401:
          $ref: '#/components/responses/Unauthorized' 
  /auth/logout:
    post:
      tags:
      - Authentication
      summary: Logout
      description: Logs out the current authenticated user and invalidates its tokens.
      requestBody:
        description: A JSON object containing the current refresh token.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshToken'
      responses:
        200:
          description: User logged out.
        400:
          $ref: '#/components/responses/BadRequest' 
        401:
          $ref: '#/components/responses/Unauthorized'          
  /auth/refresh:
    post:
      tags:
      - Authentication
      summary: Refresh
      description: |
        Refreshes the API access token.  
        If the refresh fails with a **401** error code, the user must login again.
      security:
        - bearerAuth: [] 
      requestBody:
        description: A JSON object containing the current refresh token.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshToken'
      responses:
        200:
          description: Refreshed access token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessToken'
        400:
          $ref: '#/components/responses/BadRequest' 
        401:
          $ref: '#/components/responses/Unauthorized'
  /auth/password-recovery:
    post:
      tags:
      - Authentication
      summary: Password recovery
      description: |
        Sends a password recovery email with a temporary password.  
        This method will set `is_password_expired` to **true** in the `/users/me API` until the password is changed with a new one.
      requestBody:
        description: Credentials
        content:
          application/json:
            schema:
              type: object
              description: Username or email.
              properties:
                username_email:
                  type: string
                  description: Username or email.
              required:
                - username_email
        required: true
      responses:
        200:
          $ref: '#/components/responses/Ok' 
        400:
          $ref: '#/components/responses/BadRequest'
        403:
          description: No user is associated with this username or email.
  /auth/password-change:
    post:
      tags:
      - Authentication
      summary: Password change
      description: Changes the current password with a new one.
      security:
        - bearerAuth: []       
      requestBody:
        description: Credentials
        content:
          application/json:
            schema:
              type: object
              properties:
                current_password:
                  type: string
                  description: The current password.
                new_password:
                  type: string
                  description: The new password
              required:
                - current_password
                - new_password
        required: true
      responses:
        200:
          $ref: '#/components/responses/Ok' 
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'  
        403:
          $ref: '#/components/responses/Forbidden'          
# User          
  /user/me:
    get:
      tags:
      - User
      summary: User profile
      description: |
        This API provides authenticated user details.  
        Notes:
          - **grants** can be used to preemtly know with features can be accessed.
          - **is_password_expired** warns if the current password must be updated (i.e. the current password is expired or is temporary)
      security:
        - bearerAuth: [] 
      responses:
        200:
          description: Tokens
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
        400:
          $ref: '#/components/responses/BadRequest' 
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
# Timecard
  /timecard/settings:
    get:
      tags:
      - Timecard
      summary: Timecard settings
      description: Settings
      security:
        - bearerAuth: [] 
      responses:
        200:
          description: Settings
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TimecardSettings'
        400:
          $ref: '#/components/responses/BadRequest' 
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
  /timecard/entries:
    post:
      tags:
      - Timecard
      summary: Record a new working time
      description: Record a new working time
      security:
        - bearerAuth: [] 
      requestBody:
        description: A JSON object describing a new working time record.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TimecardNewRecord'   
      responses:
        200:
          description: Time registration success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TimeCardNewRecordId'
        400:
          $ref: '#/components/responses/BadRequest' 
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
    get:
      tags:
      - Timecard
      summary: Get all the working time entries for an authenticated user.
      description: Get all the working time entries for an authenticated user.
      security:
        - bearerAuth: [] 
      parameters:
        - name: limit
          in: query
          description: Maximum number of records to return.
          required: true
          schema:
            type: integer
            format: int64
        - name: offset
          in: query
          description: Pagination offset.
          required: true
          schema:
            type: integer
            format: int64
        - name: from
          in: query
          description: Lower date bound
          required: false
          schema:
            type: integer
            format: int64
        - name: to
          in: query
          description: Upper date bound
          required: false
          schema:
            type: integer
            format: int64                
      responses:
        200:
          description: Time registration success
          content:
            application/json:
              schema:
                type: array
                items:            
                  $ref: '#/components/schemas/TimeCardRecord'
        400:
          $ref: '#/components/responses/BadRequest' 
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'          
  /timecard/entries/last:          
     get:
      tags:
      - Timecard
      summary: Represents the last working time record inserted
      security:
        - bearerAuth: [] 
      responses:
        200:
          description: Working time record
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TimeCardRecord'
        400:
          $ref: '#/components/responses/BadRequest' 
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'          
  /timecard/entries/{id}:          
     get:
      tags:
      - Timecard
      summary: Represents a working time record
      security:
        - bearerAuth: [] 
      parameters:
        - name: id
          in: path
          description: Working time record id
          required: true
          schema:
            type: integer
            format: int64       
      responses:
        200:
          description: Working time record
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TimeCardRecord'
        400:
          $ref: '#/components/responses/BadRequest' 
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden' 
     patch:
      tags:
      - Timecard
      summary: Updates a previously recorded working time.
      security:
        - bearerAuth: [] 
      requestBody:
        description: |
          A JSON object describing an updated working time record.  
          **At least one field must be not optional.**
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TimeCardUpdatedRecord'  
      parameters:
        - name: id
          in: path
          description: Working time record id
          required: true
          schema:
            type: integer
            format: int64       
      responses:
        200:
          $ref: '#/components/responses/Ok' 
        400:
          $ref: '#/components/responses/BadRequest' 
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden' 
# Files
  /avatar/users/{avatar_name}:          
     get:
      servers:
        - url: https://files.example.com #TODO update the URL
          description: Alpha file server.
      tags:
      - Files
      summary: User avatar
      security:
        - bearerAuth: [] 
      parameters:
        - name: avatar_name
          in: path
          description: Avatar name
          required: true
          schema:
            type: string
        - name: size
          in: query
          description: Avatar size
          required: true
          schema:
            type: string
            enum: [sm, md, lg]
            description: |
              Image sizes:
              * `sm` - small 50x50
              * `md` - medium 200x200
              * `lg` - large 600x600
              sm: 50x50
      responses:
        200:
          description: Avatar image.
          content:
            image/png:
              schema:
                type: string
                format: binary
        400:
          $ref: '#/components/responses/BadRequest' 
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden' 
        404:
          $ref: '#/components/responses/NotFound'           
components:
  securitySchemes:
    bearerAuth:   
      type: http
      scheme: bearer
      bearerFormat: JWT
      
  responses:
    Ok: #200 
      description: Ok
    BadRequest: #400
      description: Bad Request
    Unauthorized: #401
      description: Unauthorized
    Forbidden: #403
      description: Access not granted (The user is blocked or doesn't have enough grants to access the API)
    NotFound: #404
      description: The specified resource was not found
      
  schemas:
    Credentials:
      type: object
      description: Authentication credentials.
      properties:
        username:
          type: string
          description: Username.
        password:
          type: string
          description: Password.
        application_id:
          type: string
          description: App unique id.
        os:
          type: string
          enum: [ANDROID, iOS]
          description: |
            Mobile OS type:
             * `ANDROID` - Android
             * `iOS` - iOS
      required:
        - username
        - password  
        - application_id
        - os
     
    RefreshToken:
      type: object
      description: Refresh token.
      properties:
        refresh_token:
          type: string
          description: Refresh token.
      required:
        - refresh_token
    
    AccessToken:
      type: object
      properties:
        access_token:
          type: string
          format: jwt
          description: Access token (JWT).
      required:
        - access_token    
        
    Tokens:
      type: object
      properties:
        access_token:
          type: string
          format: jwt
          description: Access token (JWT).
        refresh_token:
          type: string
          description: Refresh token.
          
    UserProfile:
      type: object
      properties:
        id:
          type: integer
          description: User id.
        customer_id:
          type: integer
          description: Customer id.
        username:
          type: string
          description: Username.
        name:
          type: string
          description: Name.
        surname:
          type: string
          description: Surname.
        email:
          type: string
          format: email
          description: Email.
        is_password_expired:
          type: boolean
          description: Whether or not the current password is expired and needs to be changed.
        grants:
          type: array
          items:
            type: string
      required:
        - id
        - customer_id
        - username
        - name
        - email
        - grants
        
    TimecardSettings:
      description: JSON containing all the settings needed by the puncher.
      type: object
      properties:
        justifications:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
              direction:
                type: string
                enum: [in, out, both]
                description: |
                  Direction for which this justification is available to be passed during a workinng time record:
                  * `in` - The justification is available only for a entry.
                  * `out` - The justification is available only for an exit.
                  * `both` - The justification is available only for both entry and exit.
              localization:
                description: Justifications are customizabile, it's up to a customer to provide localicazions.
                type: object
                additionalProperties:
                  type: string
                example:
                  en: justification name
                  ita: nome del giustificativo
            required:
              - id
              - direction
              - localization
          description: Justifications.
      required:
        - justifications

    TimecardNewRecord:
      type: object
      properties:
        is_in:
          type: boolean
          description: Whether or not the time entry represent an entrance.
        justification_id:
          type: integer
          description: The time entry justification kind (if any).
        notes:
          type: string
          example: "notes"
      required:
        - is_in
      oneOf:
        - properties:
            realtime_inserted:
              type: object
              description: Recorded in realtime.
              properties:
                geolocation:
                  $ref: '#/components/schemas/Geolocation'
        - properties:
            manually_inserted:
              type: object
              description: Added later in time.
              properties:
                date:
                  type: integer
                  example: 1655460944344
              required:
                - date 
          
    Geolocation:
      type: object
      properties:
        latitude:
          type: integer
          minimum: -90
          maximum: 90
        longitude:
          type: integer
          minimum: -180
          maximum: 180                  
      required:
        - latitude
        - longitude     
        
    TimeCardNewRecordId:
      type: object
      properties:
        id:
          type: integer
          description: Newly registered time id.
      required:
        - id    
        
    TimeCardRecord:
      type: object
      properties:
        id:
          type: integer
          description: Record id.
        is_in:
          type: integer
          description: Whether or not the tracked time is an entry or not.          
        is_validated:
          type: integer
          description: Whether or not the tracked time had been validated.
        is_confirmed:
          type: integer
          description: Whether or not the tracked time had been confirmed.
        date:
          type: string
          description: Tracked date.
        notes:
          type: string
          description: Additional notes.
        justification_id:
          type: integer
          description: Justification id (if any).
        geolocation:
          $ref: '#/components/schemas/Geolocation'   
      required:
        - id  
        - is_in
        - is_validated
        - is_confirmed
        - date

    TimeCardUpdatedRecord:
      type: object
      properties:
        is_in:
          type: integer
          description: Whether or not the tracked time is an entry or not.
        date:
          type: string
          description: Tracked date.
        notes:
          type: string
          description: Additional notes.
        justification_id:
          type: integer
          description: Justification id (if any).
      