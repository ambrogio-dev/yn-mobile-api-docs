{
  "swagger": "2.0",
  "info": {
    "title": "Timecard",
    "description": "<p>Description TODO</p>"
  },
  "host": "alpha.youneed.it/mobile",
  "basePath": "/v2",
  "schemes": [
    "https"
  ],
  "paths": {
    "/timecard/settings": {
      "get": {
        "description": "<p>Get settings</p>",
        "parameters": [
          {
            "in": "headers",
            "name": "Authorization",
            "type": "string",
            "description": "The access token in the format: <b>Bearer [token]</b>",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "required": [
                "justifications"
              ],
              "properties": {
                "justifications": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "id",
                      "direction",
                      "localization"
                    ],
                    "properties": {
                      "id": {
                        "type": "number",
                        "description": "Justification id",
                        "example": 1
                      },
                      "direction": {
                        "type": "string",
                        "description": "Directions in which the justification is available",
                        "example": "out",
                        "enum": [
                          "in",
                          "out",
                          "both"
                        ]
                      },
                      "localization": {
                        "type": "array",
                        "description": "Localized names (in all the available languages) for the justification name.",
                        "items": {
                          "type": "object",
                          "additionalProperties": {
                            "type": "string"
                          }
                        },
                        "example": [
                          {
                            "it": "Pausa"
                          },
                          {
                            "en": "Break"
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/timecard/entries": {
      "post": {
        "description": "<p>Add a new time entry (in or out)./p>",
        "parameters": [
          {
            "in": "headers",
            "name": "Authorization",
            "type": "string",
            "description": "The access token in the format: <b>Bearer [token]</b>",
            "required": true
          },
          {
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "is_in"
              ],
              "description": "manually_inserted and realtime_inserted are mutually exclusive",
              "properties": {
                "notes": {
                  "description": "Notes",
                  "type": "string",
                  "example": "This is a note"
                },
                "is_in": {
                  "description": "Whether or not the time entry represents an entrance.",
                  "type": "boolean",
                  "example": true
                },
                "justification_id": {
                  "description": "The time entry justification kind (if any).",
                  "type": "number",
                  "example": 1,
                  "enum": [
                    1,
                    2,
                    3,
                    4
                  ]
                },
                "realtime_inserted": {
                  "type": "object",
                  "properties": {
                    "geolocation": {
                      "type": "object",
                      "properties": {
                        "latitude": {
                          "type": "mumber",
                          "example": 43.88425,
                          "minimum": -90,
                          "maximum": 90
                        },
                        "longitude": {
                          "type": "mumber",
                          "example": 11.09092,
                          "minimum": -180,
                          "maximum": 180
                        }
                      }
                    }
                  }
                },
                "manually_inserted": {
                  "type": "object",
                  "properties": {
                    "date": {
                      "type": "mumber",
                      "example": 1655460944344
                    }
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "required": [
                "id"
              ],
              "properties": {
                "id": {
                  "description": "Inserted time entry Id",
                  "type": "integer",
                  "example": 1
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: user exists but is blocked"
          },
          "401": {
            "description": "Unauthorized: user doesn't exists or is not authenticated"
          },
          "400": {
            "description": "Bad Request: one of required params is not provided or not valid."
          }
        }
      },
      "get": {
        "description": "<p>Get all the time entries for the authenticated user.</p>",
        "parameters": [
          {
            "in": "headers",
            "name": "Authorization",
            "type": "string",
            "description": "The access token in the format: <b>Bearer [token]</b>",
            "required": true
          },
          {
            "in": "query",
            "name": "limit",
            "type": "integer",
            "required": true
          },
          {
            "in": "query",
            "name": "offset",
            "type": "integer",
            "required": true
          },
          {
            "in": "query",
            "name": "from",
            "type": "integer",
            "required": false
          },
          {
            "in": "query",
            "name": "to",
            "type": "integer",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "required": [
                  "id",
                  "is_in",
                  "is_validated",
                  "is_confirmed",
                  "date"
                ],
                "properties": {
                  "id": {
                    "description": "The time entry Id",
                    "type": "integer",
                    "example": 123
                  },
                  "notes": {
                    "description": "Notes",
                    "type": "string",
                    "example": "This is a note"
                  },
                  "is_in": {
                    "description": "Whether or not the time entry represents an entrance.",
                    "type": "boolean",
                    "example": true
                  },
                  "is_validated": {
                    "description": "The time entry is validated",
                    "type": "boolean",
                    "example": true
                  },
                  "is_confirmed": {
                    "description": "The time entry is confirmed",
                    "type": "boolean",
                    "example": true
                  },
                  "justification_id": {
                    "description": "The time entry justification",
                    "type": "number",
                    "example": 1,
                    "enum": [
                      1,
                      2,
                      3,
                      4
                    ]
                  },
                  "date": {
                    "description": "The time entry unix timestamp (milliseconds)",
                    "type": "number",
                    "example": 1655460944344
                  },
                  "geolocation": {
                    "type": "object",
                    "properties": {
                      "latitude": {
                        "type": "mumber",
                        "example": 43.88425,
                        "minimum": -90,
                        "maximum": 90
                      },
                      "longitude": {
                        "type": "mumber",
                        "example": 11.09092,
                        "minimum": -180,
                        "maximum": 180
                      }
                    }
                  }
                }
              }
            }
          },
          "204": {
            "description": "The API returns an empty list"
          },
          "403": {
            "description": "Forbidden: user exists but is blocked"
          },
          "401": {
            "description": "Unauthorized: user doesn't exists or is not authenticated"
          },
          "400": {
            "description": "Bad Request: one of required params is not provided or not valid."
          }
        }
      }
    },
    "/timecard/entries/{id}": {
      "get": {
        "description": "<p>Get a time entry detail.</p>",
        "parameters": [
          {
            "in": "headers",
            "name": "Authorization",
            "type": "string",
            "description": "The access token in the format: <b>Bearer [token]</b>",
            "required": true
          },
          {
            "name": "id",
            "in": "path",
            "description": "The time entry Id.",
            "required": true,
            "type": "integer",
            "example": 123
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "required": [
                "id",
                "is_in",
                "is_validated",
                "is_confirmed",
                "date"
              ],
              "properties": {
                "id": {
                  "description": "The time entry Id",
                  "type": "integer",
                  "example": 123
                },
                "notes": {
                  "description": "Notes",
                  "type": "string",
                  "example": "This is a note"
                },
                "is_in": {
                  "description": "Whether or not the time entry represents an entrance.",
                  "type": "boolean",
                  "example": true
                },
                "is_validated": {
                  "description": "The time entry is validated",
                  "type": "boolean",
                  "example": true
                },
                "is_confirmed": {
                  "description": "The time entry is confirmed",
                  "type": "boolean",
                  "example": true
                },
                "justification_id": {
                  "description": "The time entry justification",
                  "type": "number",
                  "example": 1,
                  "enum": [
                    1,
                    2,
                    3,
                    4
                  ]
                },
                "date": {
                  "description": "The time entry unix timestamp (milliseconds)",
                  "type": "number",
                  "example": 1655460944344
                },
                "geolocation": {
                  "type": "object",
                  "properties": {
                    "latitude": {
                      "type": "mumber",
                      "example": 43.88425,
                      "minimum": -90,
                      "maximum": 90
                    },
                    "longitude": {
                      "type": "mumber",
                      "example": 11.09092,
                      "minimum": -180,
                      "maximum": 180
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: user exists but is blocked, or user is not authorized to access this API"
          },
          "401": {
            "description": "Unauthorized: user doesn't exists or is not authenticated"
          },
          "404": {
            "description": "The time entry does not exists"
          }
        }
      },
      "patch": {
        "description": "<p>Update a time entry.</p>",
        "parameters": [
          {
            "in": "headers",
            "name": "Authorization",
            "type": "string",
            "description": "The access token in the format: <b>Bearer [token]</b>",
            "required": true
          },
          {
            "name": "id",
            "in": "path",
            "description": "Time entry Id.",
            "required": true,
            "type": "integer",
            "example": 123
          },
          {
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "date",
                "is_in"
              ],
              "description": "manually_inserted and realtime_inserted are mutually exclusive",
              "properties": {
                "notes": {
                  "description": "Notes",
                  "type": "string",
                  "example": "This is a note"
                },
                "date": {
                  "description": "Timecsart timestamp",
                  "type": "number",
                  "example": 1655460944344
                },
                "is_in": {
                  "description": "Whether or not the time entry represents an entrance.",
                  "type": "boolean",
                  "example": true
                },
                "justification_id": {
                  "description": "The time entry justification kind (if any).",
                  "type": "number",
                  "example": 1,
                  "enum": [
                    1,
                    2,
                    3,
                    4
                  ]
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "403": {
            "description": "Forbidden: user exists but is blocked"
          },
          "401": {
            "description": "Unauthorized: user doesn't exists or is not authenticated"
          },
          "404": {
            "description": "The time entry doesn't exist or it it has been done by a different user."
          },
          "400": {
            "description": "Bad Request: one of required params is not provided or not valid."
          }
        }
      }
    },
    "/timecard/entries/last": {
      "get": {
        "description": "<p>Get the last time entry.</p>",
        "parameters": [
          {
            "in": "headers",
            "name": "Authorization",
            "type": "string",
            "description": "The access token in the format: <b>Bearer [token]</b>",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "required": [
                "id",
                "is_in",
                "is_validated",
                "is_confirmed",
                "date"
              ],
              "properties": {
                "id": {
                  "description": "The time entry Id",
                  "type": "integer",
                  "example": 123
                },
                "notes": {
                  "description": "Notes",
                  "type": "string",
                  "example": "This is a note"
                },
                "is_in": {
                  "description": "Whether or not the time entry represents an entrance.",
                  "type": "boolean",
                  "example": true
                },
                "is_validated": {
                  "description": "The time entry is validated",
                  "type": "boolean",
                  "example": true
                },
                "is_confirmed": {
                  "description": "The time entry is confirmed",
                  "type": "boolean",
                  "example": true
                },
                "justification_id": {
                  "description": "The time entry justification",
                  "type": "number",
                  "example": 1,
                  "enum": [
                    1,
                    2,
                    3,
                    4
                  ]
                },
                "date": {
                  "description": "The time entry unix timestamp (milliseconds)",
                  "type": "number",
                  "example": 1655460944344
                },
                "geolocation": {
                  "type": "object",
                  "properties": {
                    "latitude": {
                      "type": "mumber",
                      "example": 43.88425,
                      "minimum": -90,
                      "maximum": 90
                    },
                    "longitude": {
                      "type": "mumber",
                      "example": 11.09092,
                      "minimum": -180,
                      "maximum": 180
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: user exists but is blocked"
          },
          "401": {
            "description": "Unauthorized: user doesn't exists or is not authenticated"
          },
          "404": {
            "description": "The user has not time entries yet."
          }
        }
      }
    }
  }
}